import type { RetirementFormData } from './types';

class ActionProvider {
  createChatBotMessage: any;
  setState: any;
  onComplete?: (data: RetirementFormData) => void;
  openAIKey?: string;

  constructor(
    createChatBotMessage: any,
    setStateFunc: any,
    createClientMessage: any,
    stateRef: any,
    createCustomMessage: any,
    props?: any
  ) {
    this.createChatBotMessage = createChatBotMessage;
    this.setState = setStateFunc;

    // react-chatbot-kit wraps custom props in actionProviderProps
    const actionProviderProps = props?.actionProviderProps || props;

    if (actionProviderProps) {
      this.onComplete = actionProviderProps.onComplete;
      this.openAIKey = actionProviderProps.openAIKey;
    }
  }

  async handleUserMessage(message: string) {
    const currentState = await new Promise<any>((resolve) => {
      this.setState((prev: any) => {
        resolve(prev);
        return prev;
      });
    });

    const currentStep = currentState.formData?.currentStep || 'age';
    const formData = { ...currentState.formData };

    const response = await this.getOpenAIResponse(message, currentStep, formData);

    const botMessage = this.createChatBotMessage(response);

    this.setState((prev: any) => ({
      ...prev,
      messages: [...prev.messages, botMessage],
      formData: { ...prev.formData, ...formData },
    }));

    console.log('Checking form completion with formData:', formData);
    console.log('isFormComplete:', this.isFormComplete(formData));

    if (this.isFormComplete(formData)) {
      setTimeout(() => {
        const completeMessage = this.createChatBotMessage(
          'Åšwietnie! ZebraÅ‚em wszystkie informacje. PrzejdÅºmy do kalkulatora emerytury.'
        );
        this.setState((prev: any) => {
          const finalFormData = { ...prev.formData, ...formData };

          if (this.onComplete) {
            setTimeout(() => this.onComplete!(finalFormData), 1500);
          }

          return {
            ...prev,
            messages: [...prev.messages, completeMessage],
          };
        });
      }, 1000);
    }
  }

  async getOpenAIResponse(message: string, currentStep: string, formData: RetirementFormData): Promise<string> {
    try {
      if (!this.openAIKey) {
        return 'Przepraszam, brak klucza API. Skontaktuj siÄ™ z administratorem.';
      }

      const systemPrompt = this.buildSystemPrompt(currentStep, formData);

      // Get conversation history from state
      const currentState = await new Promise<any>((resolve) => {
        this.setState((prev: any) => {
          resolve(prev);
          return prev;
        });
      });

      // Build conversation history for OpenAI
      const conversationHistory = currentState.messages
        .map((msg: any) => ({
          role: msg.type === 'bot' ? 'assistant' : 'user',
          content: msg.message
        }))
        .slice(-10); // Keep last 10 messages for context

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.openAIKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [
            { role: 'system', content: systemPrompt },
            ...conversationHistory,
            { role: 'user', content: message }
          ],
          temperature: 0.7,
          max_tokens: 150,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('OpenAI API error:', errorData);
        throw new Error('OpenAI API request failed');
      }

      const data = await response.json();
      const aiResponse = data.choices[0]?.message?.content || '';

      // Extract data from user message using simple parsing
      this.extractDataFromMessage(message, currentStep, formData);

      return aiResponse;
    } catch (error) {
      console.error('OpenAI error:', error);
      return 'Przepraszam, wystÄ…piÅ‚ bÅ‚Ä…d. SprÃ³buj ponownie.';
    }
  }

  buildSystemPrompt(currentStep: string, formData: RetirementFormData): string {
    const basePrompt = `JesteÅ› przyjaznym asystentem emerytalnym, ktÃ³ry pomaga ludziom zaplanowaÄ‡ przyszÅ‚oÅ›Ä‡. Rozmawiasz naturalnie, po polsku, jak dobry znajomy - ciepÅ‚o, z humorem, ale profesjonalnie. UÅ¼ywaj emotikonÃ³w oszczÄ™dnie. Trzymaj odpowiedzi krÃ³tkie (max 2-3 zdania).`;

    switch (currentStep) {
      case 'age':
        return `${basePrompt} UÅ¼ytkownik podaÅ‚ swÃ³j wiek. PotwierdÅº go w ludzki sposÃ³b (np. "Super, ${formData.age} lat!" lub "Okej, notujemy ${formData.age} lat") i naturalnie przejdÅº do pytania o pÅ‚eÄ‡. Nie pisz "Jaka jest Twoja pÅ‚eÄ‡" - zapytaj bardziej naturalnie, np. "JesteÅ› mÄ™Å¼czyznÄ… czy kobietÄ…?" lub "MÄ™Å¼czyzna/kobieta?".`;
      case 'sex':
        return `${basePrompt} UÅ¼ytkownik podaÅ‚ pÅ‚eÄ‡. PotwierdÅº krÃ³tko i od razu zapytaj o miesiÄ™czne zarobki brutto w naturalny sposÃ³b, np. "Ile zarabiasz miesiÄ™cznie brutto?" lub "Jakie masz teraz zarobki brutto na miesiÄ…c?". MoÅ¼esz dodaÄ‡ zachÄ™tÄ™ jak "w zÅ‚otych oczywiÅ›cie ðŸ˜Š".`;
      case 'grossSalary':
        return `${basePrompt} UÅ¼ytkownik podaÅ‚ zarobki (${formData.grossSalary} zÅ‚). MoÅ¼esz zareagowaÄ‡ (np. "NiezÅ‚e!" dla wysokiej kwoty lub po prostu "Okej"). Zapytaj w ktÃ³rym roku zaczÄ…Å‚/zaczÄ™Å‚a pracowaÄ‡, np. "W ktÃ³rym roku zaczÄ…Å‚eÅ›/zaczÄ™Å‚aÅ› pracÄ™?" lub "Od ktÃ³rego roku pracujesz?".`;
      case 'startYear':
        return `${basePrompt} UÅ¼ytkownik podaÅ‚ rok rozpoczÄ™cia pracy (${formData.startYear}). MoÅ¼esz skomentowaÄ‡ (np. "Sporo doÅ›wiadczenia!" jeÅ›li dawno, albo "CaÅ‚kiem niedawno" jeÅ›li ostatnio). Zapytaj naturalnie czy chce uwzglÄ™dniÄ‡ dni chorobowe, np. "Chcesz uwzglÄ™dniÄ‡ dni chorobowe w obliczeniach?" lub "Dodamy teÅ¼ dni chorobowe? (tak/nie)".`;
      case 'includeSickLeave': {
        const defaultRetirement = this.calculateSuggestedRetirementYear(formData);
        return `${basePrompt} UÅ¼ytkownik odpowiedziaÅ‚ na pytanie o uwzglÄ™dnienie dni chorobowych. JeÅ›li odpowiedziaÅ‚ "tak", zapytaj ile Å›rednio dni chorobowych rocznie, np. "Ile Å›rednio dni chorobowych rocznie?". JeÅ›li "nie", potwierdÅº i zapytaj o rok emerytury KONIECZNIE podajÄ…c sugerowany rok ${defaultRetirement}, np. "Okej, pomijamy. W ktÃ³rym roku planujesz emeryturÄ™? (sugerowany: ${defaultRetirement})".`;
      }
      case 'avgSickDaysPerYear': {
        const defaultRetirement = this.calculateSuggestedRetirementYear(formData);
        return `${basePrompt} UÅ¼ytkownik podaÅ‚ liczbÄ™ dni chorobowych (${formData.avgSickDaysPerYear}). PotwierdÅº krÃ³tko i zapytaj naturalnie o planowany rok emerytury. MUSISZ podaÄ‡ sugerowany rok: ${defaultRetirement}, np. "A kiedy planujesz przejÅ›Ä‡ na emeryturÄ™? SugerujÄ™ rok ${defaultRetirement}" lub "W ktÃ³rym roku emerytura? (sugerowany: ${defaultRetirement})".`;
      }
      case 'retirementYear':
        return `${basePrompt} UÅ¼ytkownik podaÅ‚ rok przejÅ›cia na emeryturÄ™ (${formData.retirementYear}). Zareaguj naturalnie na to ile lat zostaÅ‚o (np. "To juÅ¼ za kilka lat!" lub "Jeszcze trochÄ™ czasu"). Zapytaj o kod pocztowy w swobodny sposÃ³b, np. "Podaj jeszcze kod pocztowy (jeÅ›li chcesz), Å¼eby dokÅ‚adniej obliczyÄ‡". Daj wyraÅºnie znaÄ‡, Å¼e moÅ¼na pominÄ…Ä‡.`;
      case 'zipCode':
        return `${basePrompt} To ostatnie pytanie o kod pocztowy XX-XXX. JeÅ›li uÅ¼ytkownik chce pominÄ…Ä‡, przyjmij to z gracjÄ…. JeÅ›li poda kod, potwierdÅº krÃ³tko i przyjaÅºnie, np. "Super, mamy wszystko!".`;
      default:
        return basePrompt;
    }
  }

  extractDataFromMessage(message: string, currentStep: string, formData: RetirementFormData): void {
    const lowerMessage = message.toLowerCase();

    switch (currentStep) {
      case 'age': {
        const age = this.extractNumber(message);
        if (age && age >= 18 && age <= 100) {
          formData.age = age;
          formData.currentStep = 'sex';
        }
        break;
      }

      case 'sex': {
        if (lowerMessage.includes('mÄ™Å¼czyzna') || lowerMessage.includes('mezczyzna') || lowerMessage.includes('m')) {
          formData.sex = 'M';
          formData.currentStep = 'grossSalary';
        } else if (lowerMessage.includes('kobieta') || lowerMessage.includes('k')) {
          formData.sex = 'F';
          formData.currentStep = 'grossSalary';
        }
        break;
      }

      case 'grossSalary': {
        const salary = this.extractNumber(message);
        if (salary && salary >= 0 && salary <= 1000000) {
          formData.grossSalary = salary;
          formData.currentStep = 'startYear';
        }
        break;
      }

      case 'startYear': {
        const year = this.extractNumber(message);
        const currentYear = new Date().getFullYear();
        if (year && year >= 1950 && year <= currentYear) {
          formData.startYear = year;
          formData.currentStep = 'includeSickLeave';
        }
        break;
      }

      case 'includeSickLeave': {
        if (lowerMessage.includes('tak') || lowerMessage.includes('yes') || lowerMessage.includes('chc')) {
          formData.includeSickLeave = true;
          formData.currentStep = 'avgSickDaysPerYear';
        } else if (lowerMessage.includes('nie') || lowerMessage.includes('no') || lowerMessage.includes('pomiÅ„')) {
          formData.includeSickLeave = false;
          formData.avgSickDaysPerYear = 0;
          formData.currentStep = 'retirementYear';
        }
        break;
      }

      case 'avgSickDaysPerYear': {
        const days = this.extractNumber(message);
        if (days !== null && days >= 0 && days <= 365) {
          formData.avgSickDaysPerYear = days;
          formData.currentStep = 'retirementYear';
        }
        break;
      }

      case 'retirementYear': {
        const year = this.extractNumber(message);
        const currentYear = new Date().getFullYear();

        // Check if user wants to use suggested year
        if (lowerMessage.includes('sugerowa') || lowerMessage.includes('sugeru') || lowerMessage.includes('tak') || lowerMessage.includes('domyÅ›l')) {
          const suggestedYear = this.calculateSuggestedRetirementYear(formData);
          formData.retirementYear = suggestedYear;
          formData.currentStep = 'zipCode';
        } else if (year && year >= currentYear && year <= 2100) {
          formData.retirementYear = year;
          formData.currentStep = 'zipCode';
        }
        break;
      }

      case 'zipCode': {
        if (lowerMessage.includes('pomiÅ„') || lowerMessage.includes('pomin') || lowerMessage.includes('nie')) {
          formData.zipCode = undefined;
          delete formData.currentStep;
        } else {
          const zipMatch = message.match(/\d{2}-?\d{3}/);
          if (zipMatch) {
            const zip = zipMatch[0].replace(/(\d{2})(\d{3})/, '$1-$2');
            formData.zipCode = zip;
            delete formData.currentStep;
          }
        }
        break;
      }
    }
  }

  extractNumber(text: string): number | null {
    const match = text.replace(/\s/g, '').match(/\d+/);
    return match ? parseInt(match[0], 10) : null;
  }

  calculateSuggestedRetirementYear(formData: RetirementFormData): number {
    const age = formData.age || 35;
    const sex = formData.sex || 'M';
    const currentYear = new Date().getFullYear();
    const birthYear = currentYear - age;
    const retirementAge = sex === 'M' ? 65 : 60;
    return birthYear + retirementAge;
  }

  isFormComplete(formData: RetirementFormData): boolean {
    return !!(
      formData.age &&
      formData.sex &&
      formData.grossSalary !== undefined &&
      formData.startYear &&
      formData.retirementYear &&
      !formData.currentStep
    );
  }
}

export default ActionProvider;
